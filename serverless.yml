service: serverless-auth

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-aws-documentation
  - serverless-domain-manager

provider:
  name: aws
  region: us-east-2
  runtime: nodejs12.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"] }
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        - {
            "Fn::Join":
              [
                "/",
                [
                  { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"] },
                  "index",
                  "UserDetail",
                ],
              ],
          }
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    USERS_INDEX_NAME: ${self:custom.usersIndexName}
    NODE_ENV: ${self:provider.stage}
    ACCESS_TOKEN_SECRET: ${env:ACCESS_TOKEN_SECRET}
    REFRESH_TOKEN_SECRET: ${env:REFRESH_TOKEN_SECRET}

functions:
  auth:
    handler: handler.server
    events:
      - http:
          path: /login
          method: post
      - http:
          path: /register
          method: post
      - http:
          path: /verify
          method: post

resources:
  Resources:
    UsersDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.usersIndexName}
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

custom:
  usersTableName: "users-table-${self:provider.stage}"
  usersIndexName: "UserDetail"
  customDomain:
    domainName: api.saipathuri.me
    basePath: auth
    certificateName: "api.saipathuri.me"
    createRoute53Record: true
    endpointType: "regional"
    securityPolicy: tls_1_2
  documentation:
    api: ${file(docs/swagger.yml)}
